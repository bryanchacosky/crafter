/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bryan Chacosky - 2013 'Crafter' Code Sample
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "CraftingObjectInterface.h"
#include <array>
#include <hash_map>
#include <string>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Crafter object to convert multiple ingredients into a new ingredient based on provided recipes:

template < unsigned int Size = 3 >
class Crafter
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:

    // Lifecycle methods:
    Crafter( void );
    ~Crafter( void );

    // Interface methods:
    void                            addRecipe           ( const std::array< CraftingObjectInterface *, Size * Size > * const ingredients, CraftingObjectAllocator allocator );      // Inserts a new recipe.  'ingredients' list must have a size of SIZE * SIZE, be non-null, and not contain an existing recipe for the ingredients.  'allocator' must be non-null.
    CraftingObjectAllocator * const interpretIngredients( const std::array< CraftingObjectInterface *, Size * Size > * const ingredients ) const;                                   // Interprets a list of provided ingredients.  Returns resulting allocator or NULL if no valid match.

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  private:

    // Class specific constants:
    static  const char NilHashValue = '0';                                      // Value of an empty container location in the crafter
    typedef std::hash_map< std::string, CraftingObjectAllocator > RecipeMap;    // Defines a map from std::string -> CrafingObjectAllocator

    // Static methods:
    static std::string hashIngredients( const std::array< CraftingObjectInterface *, Size * Size > * const ingredients );     // Converts a list of provided ingredients into a hash key.  'ingredients' list must have a size of SIZE * SIZE and be non-null.

    // Members:
    RecipeMap *availableRecipes;    // Map of all available recipes
    
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Crafter.cpp"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////