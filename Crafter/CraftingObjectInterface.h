/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bryan Chacosky - 2013 'Crafter' Code Sample
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Crafting object abstract interface:
// All crafting objects must subclass this interface:

class CraftingObjectInterface
{
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:

    virtual ~CraftingObjectInterface( void ) { };   // Adding a virtual destructor lets us use the abstract class as an interface ( so we can add it to lists )
    virtual char hashValue( void ) const = 0;       // Returns the single character hash value

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Allocation creator functor to create new crafting objects:
// Would probably be better to use this method inside of CraftingObjectInterface,
// and use a functor for the class member method, but this interface is cleaner for a sample:

template < class T >
CraftingObjectInterface *allocateCraftingObject( void )
{
  return new T( );
};

// Creates an allocator for a given crafting object subclass:
#define CreateCraftingObjectAllocator( _CLASS_ ) &allocateCraftingObject<_CLASS_>

// Defines an allocator for a crafting object:
typedef CraftingObjectInterface *( *CraftingObjectAllocator )( void );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////